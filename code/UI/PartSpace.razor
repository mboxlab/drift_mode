@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Car;
@inherits PanelComponent

<root>
	@if (InteractiveCamera.Target == Object.Parent)
	{
		<div class="title" onclick=@OnClick>@_name</div>
	}
</root>

@code
{
	[Property] public bool IsInterspace;
	[Property, ShowIf("IsInterspace", false)] Part Part { get; set; }
	[Property, ShowIf("IsInterspace", true)] string Name { get; set; }

	private string _name { get { return IsInterspace ? Name : Part.Name; } }
	private InteractiveObject Object;

	private void OnClick()
	{
		if (Panel.Style.Opacity == 0f) return;
		InteractiveCamera.Instance.Focus(Object);

		if (!IsInterspace && Object.IsLooked)
		{
			GameObject obj = Scene.CreateObject(true);
			obj.Name = "Screen";

			obj.Components.Create<ScreenPanel>();
			PartSelector selector = obj.Components.Create<PartSelector>();
			InteractiveCamera.Instance.OnMouseDrag = selector.OnMouseDrag;
			selector.Part = Part;
			selector.Object = Object;
		}
	}

	protected override void OnStart()
	{
		base.OnStart();

		Object = Components.Get<InteractiveObject>();
	}

	protected override void OnUpdate()
	{
		base.OnUpdate();

		float dot = MathF.Max(0, (Object.Rotation + Object.LocalAngles.ToRotation()).Forward.Dot(InteractiveCamera.Instance.WorldRotation.Forward));
		dot /= MathF.Max(1, Object.WorldPosition.DistanceSquared(InteractiveCamera.Instance.WorldPosition) / 20000);
		dot *= dot * dot;

		Panel.Style.Opacity = MathF.Max(0f, dot);
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(InteractiveCamera.Target);
}
